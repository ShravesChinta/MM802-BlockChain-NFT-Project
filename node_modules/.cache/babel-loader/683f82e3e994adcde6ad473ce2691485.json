{"ast":null,"code":"var _jsxFileName = \"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/SignMessage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport { ethers } from \"ethers\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst signMessage = async ({\n  setError,\n  message\n}) => {\n  try {\n    console.log({\n      message\n    });\n    if (!window.ethereum) throw new Error(\"No crypto wallet found. Please install it.\");\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const signature = await signer.signMessage(message);\n    const address = await signer.getAddress();\n    return {\n      signature,\n      address\n    };\n  } catch (err) {\n    setError(err.message);\n  }\n};\n\nexport default function SignMessage() {\n  _s();\n\n  const resultBox = useRef();\n  const [signatures, setSignatures] = useState([]);\n  const [error, setError] = useState();\n\n  const handleSign = async e => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    setError();\n    const sig = await signMessage({\n      setError,\n      message: data.get(\"message\")\n    });\n\n    if (sig) {\n      setSignatures([...signatures, sig]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"m-4\",\n    onSubmit: handleSign,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"credit-card w-full shadow-lg mx-auto rounded-xl bg-white\",\n      children: [/*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"mt-4 p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-xl font-semibold text-gray-700 text-center\",\n          children: \"Sign in to your Metamask Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"my-3\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              required: true,\n              type: \"text\",\n              name: \"message\",\n              className: \"textarea w-full h-24 textarea-bordered focus:ring focus:outline-none\",\n              placeholder: \"Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary submit-button focus:ring focus:outline-none w-full\",\n          children: \"Sign message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          message: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), signatures.map((sig, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"my-3\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Your BlockChain Account is : \", sig.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, sig, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignMessage, \"wYqypxPM1oC2N8a1QMses1Q8zEU=\");\n\n_c = SignMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignMessage\");","map":{"version":3,"sources":["/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/SignMessage.js"],"names":["useState","useRef","ethers","ErrorMessage","signMessage","setError","message","console","log","window","ethereum","Error","send","provider","providers","Web3Provider","signer","getSigner","signature","address","getAddress","err","SignMessage","resultBox","signatures","setSignatures","error","handleSign","e","preventDefault","data","FormData","target","sig","get","map","idx"],"mappings":"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","sourcesContent":["import {useState, useRef } from \"react\";\nimport {ethers} from \"ethers\";\nimport ErrorMessage from \"./ErrorMessage\";\n\nconst signMessage = async ({ setError, message }) => {\n  try {\n    console.log({ message });\n    if (!window.ethereum)\n      throw new Error(\"No crypto wallet found. Please install it.\");\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const signature = await signer.signMessage(message);\n    const address = await signer.getAddress();\n\n    return {\n      signature,\n      address\n    };\n  } catch (err) {\n    setError(err.message);\n  }\n};\n\nexport default function SignMessage() {\n  const resultBox = useRef();\n  const [signatures, setSignatures] = useState([]);\n  const [error, setError] = useState();\n\n  const handleSign = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    setError();\n    const sig = await signMessage({\n      setError,\n      message: data.get(\"message\")\n    });\n    if (sig) {\n      setSignatures([...signatures, sig]);\n    }\n  };\n\n  return (\n    <form className=\"m-4\" onSubmit={handleSign}>\n      <div className=\"credit-card w-full shadow-lg mx-auto rounded-xl bg-white\">\n        <main className=\"mt-4 p-4\">\n          <h1 className=\"text-xl font-semibold text-gray-700 text-center\">\n          Sign in to your Metamask Account\n          </h1>\n          <div className=\"\">\n            <div className=\"my-3\">\n              <textarea\n                required\n                type=\"text\"\n                name=\"message\"\n                className=\"textarea w-full h-24 textarea-bordered focus:ring focus:outline-none\"\n                placeholder=\"Message\"\n              />\n            </div>\n          </div>\n        </main>\n        <footer className=\"p-4\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary submit-button focus:ring focus:outline-none w-full\"\n          >\n            Sign message\n          </button>\n          <ErrorMessage message={error} />\n        </footer>\n        {signatures.map((sig, idx) => {\n          return (\n            <div className=\"p-2\" key={sig}>\n              <div className=\"my-3\">\n                <p>Your BlockChain Account is : {sig.address}</p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}