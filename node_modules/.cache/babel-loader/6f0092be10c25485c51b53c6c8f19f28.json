{"ast":null,"code":"var _jsxFileName = \"/Users/sravantichinta/Desktop/MMBlockChain/MM802/src/chat/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\nimport { NavBar, ChatCard, Message, AddNewChat } from \"./components/Components.js\";\nimport { ethers } from \"ethers\";\nimport { abi } from \"./abi\"; // Add the contract address inside the quotes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x9Be161e062201CeBf1ec41A0Da256D069Ad456f5\";\nexport function App(props) {\n  _s();\n\n  const [friends, setFriends] = useState(null);\n  const [myName, setMyName] = useState(null);\n  const [myPublicKey, setMyPublicKey] = useState(null);\n  const [activeChat, setActiveChat] = useState({\n    friendname: null,\n    publicKey: null\n  });\n  const [activeChatMessages, setActiveChatMessages] = useState(null);\n  const [showConnectButton, setShowConnectButton] = useState(\"block\");\n  const [myContract, setMyContract] = useState(null); // Save the contents of abi in a variable\n\n  const contractABI = abi;\n  let provider;\n  let signer; // Login to Metamask and check the if the user exists else creates one\n\n  async function login() {\n    let res = await connectToMetamask();\n\n    if (res === true) {\n      provider = new ethers.providers.Web3Provider(window.ethereum);\n      signer = provider.getSigner();\n\n      try {\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n        setMyContract(contract);\n        const address = await signer.getAddress();\n        let present = await contract.checkUserExists(address);\n        let username;\n        if (present) username = present;else {\n          username = prompt(\"Enter a username\", \"Guest\");\n          if (username === \"\") username = \"Guest\";\n          await contract.createAccount(username);\n        }\n        setMyName(username);\n        setMyPublicKey(address);\n        setShowConnectButton(\"none\");\n      } catch (err) {}\n    } else {\n      alert(\"Couldn't connect to Metamask\");\n    }\n  } // Check if the Metamask connects\n\n\n  async function connectToMetamask() {\n    try {\n      await window.ethereum.enable();\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  async function addChat(name, publicKey) {\n    try {\n      let present = await myContract.checkUserExists(publicKey);\n\n      if (!present) {\n        alert(\"Address not found: Ask them to join the app :)\");\n        return;\n      }\n\n      try {\n        await myContract.addFriend(publicKey, name);\n        const frnd = {\n          name: name,\n          publicKey: publicKey\n        };\n        setFriends(friends.concat(frnd));\n      } catch (err) {\n        alert(\"Friend already added! You can't be friends with the same person twice\");\n      }\n    } catch (err) {\n      alert(\"Invalid address!\");\n    }\n  }\n\n  async function sendMessage(data) {\n    if (!(activeChat && activeChat.publicKey)) return;\n    const recieverAddress = activeChat.publicKey;\n    await myContract.sendMessage(recieverAddress, data);\n  }\n\n  async function sendDefaultMessage(data) {\n    if (!(activeChat && activeChat.publicKey)) return;\n    const recieverAddress = activeChat.publicKey;\n    data = \"Please check my NFT details for engraving \";\n    await myContract.sendMessage(recieverAddress, data);\n  } // Fetch chat messages with a friend\n\n\n  async function getMessage(friendsPublicKey) {\n    let nickname;\n    let messages = [];\n    friends.forEach(item => {\n      if (item.publicKey === friendsPublicKey) nickname = item.name;\n    }); // Get messages\n\n    const data = await myContract.readMessage(friendsPublicKey);\n    data.forEach(item => {\n      const timestamp = new Date(1000 * item[1].toNumber()).toUTCString();\n      messages.push({\n        publicKey: item[0],\n        timeStamp: timestamp,\n        data: item[2]\n      });\n    });\n    setActiveChat({\n      friendname: nickname,\n      publicKey: friendsPublicKey\n    });\n    setActiveChatMessages(messages);\n  } // This executes every time page renders and when myPublicKey or myContract changes\n\n\n  useEffect(() => {\n    async function loadFriends() {\n      let friendList = []; // Get Friends\n\n      try {\n        const data = await myContract.getMyFriendList();\n        data.forEach(item => {\n          friendList.push({\n            publicKey: item[0],\n            name: item[1]\n          });\n        });\n      } catch (err) {\n        friendList = null;\n      }\n\n      setFriends(friendList);\n    }\n\n    loadFriends();\n  }, [myPublicKey, myContract]); // Makes Cards for each Message\n\n  const Messages = activeChatMessages ? activeChatMessages.map(message => {\n    let margin = \"5%\";\n    let sender = activeChat.friendname;\n\n    if (message.publicKey === myPublicKey) {\n      margin = \"15%\";\n      sender = \"You\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(Message, {\n      marginLeft: margin,\n      sender: sender,\n      data: message.data,\n      timeStamp: message.timeStamp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }, this);\n  }) : null; // Displays each card\n\n  const chats = friends ? friends.map(friend => {\n    return /*#__PURE__*/_jsxDEV(ChatCard, {\n      publicKey: friend.publicKey,\n      name: friend.name,\n      getMessages: key => getMessage(key)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }, this);\n  }) : null;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      padding: \"0px\",\n      border: \"1px solid grey\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      username: myName,\n      login: async () => login(),\n      showButton: showConnectButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        style: {\n          paddingRight: \"0px\",\n          borderRight: \"2px solid #000000\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"#DCDCDC\",\n            height: \"100%\",\n            overflowY: \"auto\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            style: {\n              marginRight: \"0px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                width: \"100%\",\n                alignSelf: \"center\",\n                marginLeft: \"15px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Card.Header, {\n                children: \"Chats\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), chats, /*#__PURE__*/_jsxDEV(AddNewChat, {\n            myContract: myContract,\n            addHandler: (name, publicKey) => addChat(name, publicKey)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 8,\n        style: {\n          paddingLeft: \"0px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"#DCDCDC\",\n            height: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            style: {\n              marginRight: \"0px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                width: \"100%\",\n                alignSelf: \"center\",\n                margin: \"0 0 5px 15px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Card.Header, {\n                children: [activeChat.friendname, \" : \", activeChat.publicKey, /*#__PURE__*/_jsxDEV(Button, {\n                  style: {\n                    float: \"right\"\n                  },\n                  variant: \"warning\",\n                  onClick: () => {\n                    if (activeChat && activeChat.publicKey) getMessage(activeChat.publicKey);\n                  },\n                  children: \"Refresh\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"MessageBox\",\n            style: {\n              height: \"400px\",\n              overflowY: \"auto\"\n            },\n            children: Messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"SendMessage\",\n            style: {\n              borderTop: \"2px solid black\",\n              position: \"relative\",\n              bottom: \"0px\",\n              padding: \"10px 45px 0 45px\",\n              margin: \"0 95px 0 0\",\n              width: \"97%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              onSubmit: e => {\n                e.preventDefault();\n                sendMessage(document.getElementById(\"messageData\").value);\n                document.getElementById(\"messageData\").value = \"\";\n              },\n              children: /*#__PURE__*/_jsxDEV(Form.Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    className: \"mb-2\",\n                    style: {\n                      float: \"right\"\n                    },\n                    onClick: () => {\n                      sendMessage(document.getElementById(\"messageData\").value);\n                      document.getElementById(\"messageData\").value = \"\";\n                    },\n                    children: \"Send Messages\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    xs: 9,\n                    children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                      id: \"messageData\",\n                      className: \"mb-2\",\n                      placeholder: \"Send Message \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 289,\n                      columnNumber: 21\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    className: \"mb-2\",\n                    style: {\n                      float: \"right\"\n                    },\n                    onClick: () => {\n                      sendDefaultMessage(document.getElementById(\"messageData\").value);\n                      document.getElementById(\"messageData\").value = \"\";\n                    },\n                    children: \"Send Details NFT\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oBEGAUqZf9Sjp/r3RY/sOWhGtq0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sravantichinta/Desktop/MMBlockChain/MM802/src/chat/App.jsx"],"names":["React","useState","useEffect","Container","Row","Col","Card","Form","Button","NavBar","ChatCard","Message","AddNewChat","ethers","abi","CONTRACT_ADDRESS","App","props","friends","setFriends","myName","setMyName","myPublicKey","setMyPublicKey","activeChat","setActiveChat","friendname","publicKey","activeChatMessages","setActiveChatMessages","showConnectButton","setShowConnectButton","myContract","setMyContract","contractABI","provider","signer","login","res","connectToMetamask","providers","Web3Provider","window","ethereum","getSigner","contract","Contract","address","getAddress","present","checkUserExists","username","prompt","createAccount","err","alert","enable","addChat","name","addFriend","frnd","concat","sendMessage","data","recieverAddress","sendDefaultMessage","getMessage","friendsPublicKey","nickname","messages","forEach","item","readMessage","timestamp","Date","toNumber","toUTCString","push","timeStamp","loadFriends","friendList","getMyFriendList","Messages","map","message","margin","sender","chats","friend","key","padding","border","paddingRight","borderRight","backgroundColor","height","overflowY","marginRight","width","alignSelf","marginLeft","paddingLeft","float","borderTop","position","bottom","e","preventDefault","document","getElementById","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\r\nimport {\r\n  NavBar,\r\n  ChatCard,\r\n  Message,\r\n  AddNewChat,\r\n} from \"./components/Components.js\";\r\nimport { ethers } from \"ethers\";\r\nimport { abi } from \"./abi\";\r\n\r\n// Add the contract address inside the quotes\r\nconst CONTRACT_ADDRESS = \"0x9Be161e062201CeBf1ec41A0Da256D069Ad456f5\";\r\n\r\nexport function App(props) {\r\n  const [friends, setFriends] = useState(null);\r\n  const [myName, setMyName] = useState(null);\r\n  const [myPublicKey, setMyPublicKey] = useState(null);\r\n  const [activeChat, setActiveChat] = useState({\r\n    friendname: null,\r\n    publicKey: null,\r\n  });\r\n  const [activeChatMessages, setActiveChatMessages] = useState(null);\r\n  const [showConnectButton, setShowConnectButton] = useState(\"block\");\r\n  const [myContract, setMyContract] = useState(null);\r\n  \r\n  // Save the contents of abi in a variable\r\n  const contractABI = abi;\r\n  let provider;\r\n  let signer;\r\n   \r\n  // Login to Metamask and check the if the user exists else creates one\r\n  async function login() {\r\n    let res = await connectToMetamask();\r\n    if (res === true) {\r\n      provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      signer = provider.getSigner();\r\n      try {\r\n        const contract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          contractABI,\r\n          signer\r\n        );\r\n        setMyContract(contract);\r\n        const address = await signer.getAddress();\r\n        let present = await contract.checkUserExists(address);\r\n        let username;\r\n        if (present)\r\n        username = present;\r\n        else {\r\n          username = prompt(\"Enter a username\",\"Guest\");\r\n          if (username === \"\") username = \"Guest\";\r\n          await contract.createAccount(username);\r\n        }\r\n        setMyName(username);\r\n        setMyPublicKey(address);\r\n        setShowConnectButton(\"none\");\r\n      } catch (err) {\r\n       \r\n      }\r\n    } else {\r\n      alert(\"Couldn't connect to Metamask\");\r\n    }\r\n  }\r\n\r\n  // Check if the Metamask connects\r\n  async function connectToMetamask() {\r\n    try {\r\n      await window.ethereum.enable();\r\n      return true;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  async function addChat(name, publicKey) {\r\n    try {\r\n      let present = await myContract.checkUserExists(publicKey);\r\n      if (!present) {\r\n        alert(\"Address not found: Ask them to join the app :)\");\r\n        return;\r\n      }\r\n      try {\r\n        await myContract.addFriend(publicKey, name);\r\n        const frnd = { name: name, publicKey: publicKey };\r\n        setFriends(friends.concat(frnd));\r\n      } catch (err) {\r\n        alert(\r\n          \"Friend already added! You can't be friends with the same person twice\"\r\n        );\r\n      }\r\n    } catch (err) {\r\n      alert(\"Invalid address!\");\r\n    }\r\n  }\r\n  \r\n  async function sendMessage(data) {\r\n    if (!(activeChat && activeChat.publicKey)) return;\r\n    const recieverAddress = activeChat.publicKey;\r\n    await myContract.sendMessage(recieverAddress, data);\r\n  }\r\n\r\n  async function sendDefaultMessage(data){\r\n    if (!(activeChat && activeChat.publicKey)) return;\r\n    const recieverAddress = activeChat.publicKey;\r\n    data=\"Please check my NFT details for engraving \";\r\n    await myContract.sendMessage(recieverAddress, data); \r\n  }\r\n  \r\n  // Fetch chat messages with a friend\r\n  async function getMessage(friendsPublicKey) {\r\n    let nickname;\r\n    let messages = [];\r\n    friends.forEach((item) => {\r\n      if (item.publicKey === friendsPublicKey) nickname = item.name;\r\n    });\r\n    // Get messages\r\n    const data = await myContract.readMessage(friendsPublicKey);\r\n      \r\n    data.forEach((item) => {\r\n      const timestamp = new Date(1000 * item[1].toNumber()).toUTCString();\r\n      messages.push({\r\n        publicKey: item[0],\r\n        timeStamp: timestamp,\r\n        data:item[2],\r\n      });\r\n    });\r\n  \r\n    setActiveChat({ friendname: nickname, publicKey: friendsPublicKey });\r\n    setActiveChatMessages(messages);\r\n  }\r\n\r\n  // This executes every time page renders and when myPublicKey or myContract changes\r\n  useEffect(() => {\r\n    async function loadFriends() {\r\n      let friendList = [];\r\n      // Get Friends\r\n      try {\r\n        const data = await myContract.getMyFriendList();\r\n        data.forEach((item) => {\r\n          friendList.push({ publicKey: item[0], name: item[1] });\r\n        });\r\n      } catch (err) {\r\n        friendList = null;\r\n      }\r\n      setFriends(friendList);\r\n    }\r\n    loadFriends();\r\n  }, [myPublicKey, myContract]);\r\n\r\n  // Makes Cards for each Message\r\n  const Messages = activeChatMessages\r\n    ? activeChatMessages.map((message) => {\r\n        let margin = \"5%\";\r\n        let sender = activeChat.friendname;\r\n        if (message.publicKey === myPublicKey) {\r\n          margin = \"15%\";\r\n          sender = \"You\";\r\n        }\r\n        return (\r\n          <Message\r\n            marginLeft={margin}\r\n            sender={sender}\r\n            data={message.data}\r\n            timeStamp={message.timeStamp}\r\n          />\r\n        );\r\n      })\r\n    : null;\r\n\r\n  // Displays each card\r\n  const chats = friends\r\n    ? friends.map((friend) => {\r\n        return (\r\n          <ChatCard\r\n            publicKey={friend.publicKey}\r\n            name={friend.name}\r\n            getMessages={(key) => getMessage(key)}\r\n          />\r\n        );\r\n      })\r\n    : null;\r\n\r\n  return (\r\n    <Container style={{ padding: \"0px\", border: \"1px solid grey\" }}>\r\n      {/* This shows the navbar with connect button */}\r\n      <NavBar\r\n        username={myName}\r\n        login={async () => login()}\r\n        showButton={showConnectButton}\r\n      />\r\n      <Row>\r\n        {/* Here the friends list is shown */}\r\n        <Col style={{ paddingRight: \"0px\", borderRight: \"2px solid #000000\" }}>\r\n          <div\r\n            style={{\r\n              backgroundColor: \"#DCDCDC\",\r\n              height: \"100%\",\r\n              overflowY: \"auto\",\r\n            }}\r\n          >\r\n            <Row style={{ marginRight: \"0px\" }}>\r\n              <Card\r\n                style={{\r\n                  width: \"100%\",\r\n                  alignSelf: \"center\",\r\n                  marginLeft: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Header>Chats</Card.Header>\r\n              </Card>\r\n            </Row>\r\n            {chats}\r\n            <AddNewChat\r\n              myContract={myContract}\r\n              addHandler={(name, publicKey) => addChat(name, publicKey)}\r\n            />\r\n          </div>\r\n        </Col>\r\n        <Col xs={8} style={{ paddingLeft: \"0px\" }}>\r\n          <div style={{ backgroundColor: \"#DCDCDC\", height: \"100%\" }}>\r\n            {/* Chat header with refresh button, username and public key are rendered here */}\r\n            <Row style={{ marginRight: \"0px\" }}>\r\n              <Card\r\n                style={{\r\n                  width: \"100%\",\r\n                  alignSelf: \"center\",\r\n                  margin: \"0 0 5px 15px\",\r\n                }}\r\n              >\r\n                <Card.Header>\r\n                  {activeChat.friendname} : {activeChat.publicKey}\r\n                  <Button\r\n                    style={{ float: \"right\" }}\r\n                    variant=\"warning\"\r\n                    onClick={() => {\r\n                      if (activeChat && activeChat.publicKey)\r\n                        getMessage(activeChat.publicKey);\r\n                    }}\r\n                  >\r\n                    Refresh\r\n                  </Button>\r\n                </Card.Header>\r\n              </Card>\r\n            </Row>\r\n            {/* The messages will be shown here */}\r\n            <div\r\n              className=\"MessageBox\"\r\n              style={{ height: \"400px\", overflowY: \"auto\" }}\r\n            >\r\n              {Messages}\r\n            </div>\r\n            {/* The form with send button and message input fields */}\r\n            <div\r\n              className=\"SendMessage\"\r\n              style={{\r\n                borderTop: \"2px solid black\",\r\n                position: \"relative\",\r\n                bottom: \"0px\",\r\n                padding: \"10px 45px 0 45px\",\r\n                margin: \"0 95px 0 0\",\r\n                width: \"97%\",\r\n              }}\r\n            >\r\n              <Form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  sendMessage(document.getElementById(\"messageData\").value);\r\n                  document.getElementById(\"messageData\").value = \"\";\r\n                }}\r\n              >\r\n                <Form.Row className=\"align-items-center\">\r\n                  <Col>\r\n                    <Button\r\n                      className=\"mb-2\"\r\n                      style={{ float: \"right\" }}\r\n                      onClick={() => {\r\n                        sendMessage(\r\n                          document.getElementById(\"messageData\").value\r\n                        );\r\n                        document.getElementById(\"messageData\").value = \"\";\r\n                      }}\r\n                    >\r\n                      Send Messages\r\n                    </Button>\r\n                    <Col xs={9}>\r\n                    <Form.Control\r\n                      id=\"messageData\"\r\n                      className=\"mb-2\"\r\n                      placeholder=\"Send Message \"\r\n                    />\r\n                  </Col>\r\n\r\n                    <Button\r\n                      className=\"mb-2\"\r\n                      style={{ float: \"right\" }}\r\n                      onClick={() => {\r\n                        sendDefaultMessage(\r\n                          document.getElementById(\"messageData\").value\r\n                        );\r\n                        document.getElementById(\"messageData\").value = \"\";\r\n                      }}\r\n                    >\r\n                      Send Details NFT\r\n                    </Button>\r\n                  </Col>\r\n                </Form.Row>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}