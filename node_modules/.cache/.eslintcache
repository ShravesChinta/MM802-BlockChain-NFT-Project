[{"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/index.js":"1","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/App.js":"2","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Navbar.js":"3","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Home.js":"4","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Precipitation_Month_Year_Wise.js":"5","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Snow_Monthly_Year_Wise.js":"6","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Max_Temp_Year_Wise.js":"7","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/HeroSection.js":"8","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/CardSection.js":"9","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Footer.js":"10","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Min_Temp_Year_Wise.js":"11","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Card.js":"12","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Main.js":"13","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Middle.js":"14","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Bottom.js":"15","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Middle1.js":"16","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/SignMessage.js":"17","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/ErrorMessage.js":"18"},{"size":222,"mtime":1649799268036,"results":"19","hashOfConfig":"20"},{"size":588,"mtime":1649802484343,"results":"21","hashOfConfig":"20"},{"size":470,"mtime":1649783122305,"results":"22","hashOfConfig":"20"},{"size":412,"mtime":1649801526017,"results":"23","hashOfConfig":"20"},{"size":1846,"mtime":1648393887000,"results":"24","hashOfConfig":"20"},{"size":1914,"mtime":1648393887000,"results":"25","hashOfConfig":"20"},{"size":1681,"mtime":1648393887000,"results":"26","hashOfConfig":"20"},{"size":1259,"mtime":1649788740406,"results":"27","hashOfConfig":"20"},{"size":1877,"mtime":1649781752953,"results":"28","hashOfConfig":"20"},{"size":636,"mtime":1649781025449,"results":"29","hashOfConfig":"20"},{"size":2109,"mtime":1648393887000,"results":"30","hashOfConfig":"20"},{"size":677,"mtime":1648393887000,"results":"31","hashOfConfig":"20"},{"size":887,"mtime":1649802558588,"results":"32","hashOfConfig":"20"},{"size":1346,"mtime":1649798210186,"results":"33","hashOfConfig":"20"},{"size":0,"mtime":1649801541044,"results":"34","hashOfConfig":"20"},{"size":700,"mtime":1649801512608,"results":"35","hashOfConfig":"20"},{"size":2402,"mtime":1649802663717,"results":"36","hashOfConfig":"20"},{"size":704,"mtime":1649702577759,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"rabjgp",{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/index.js",["86"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {StrictMode} from \"react\";\nReactDOM.render(\n <React.StrictMode>  \n<App />\n</React.StrictMode>,\ndocument.getElementById(\"root\")\n);",["87","88"],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/App.js",["89","90"],"import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport Middle from \"./Middle\";\nimport Footer from \"./Footer\";\nimport Middle1 from './Middle1';\n\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Home from \"./Home\";\nimport SignMessage from \"./SignMessage\";\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Navbar/>\n        <Switch>\n        <Route path=\"/\" exact component ={Home}/>\n        <Route path=\"/SignMessage\" exact component={SignMessage}/>\n        </Switch>\n      <Footer />\n      </Router>\n    </>\n  );\n};\n\nexport default App;","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Navbar.js",[],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Home.js",["91","92","93","94"],"import React from 'react';\nimport HeroSection from './HeroSection';\nimport Card from './Card';\nimport CardSection from './CardSection';\nimport Middle from './Middle';\nimport Main from './Main';\nimport Bottom from './Bottom';\nimport Middle1 from './Middle1';\n\nexport default function Home(){\n    return (\n        <>\n        <Main/>\n        <br/>\n        <Middle1/>\n        <Middle/>\n        \n        </>\n    );\n};","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Precipitation_Month_Year_Wise.js",["95"],"import React, {Component} from 'react';\nimport Plot from 'react-plotly.js';\nimport './App.css';\nclass Avg_Precipitation_Month_Year_Wise extends Component{\n    \n    constructor(props){\n        super(props);\n        this.state={data:[]}\n    }\n    componentDidMount(){\n        //add the user variable to get Precipitation for particular year for all 12 mmonths\n        const endpoint=\"https://data.edmonton.ca/resource/s4ws-tdws.json?$query=SELECT%20year,%20avg(total_precipitation_mm)%20group%20by%20year%20order%20by%20year\"\n        fetch(endpoint)\n        .then(response =>response.json())\n        .then(data=>{\n            this.setState({data:data})\n        })\n\n    }\n     \n    transformData (data) {\n            let plot_data = [];\n            let y=[];\n  \n            data.map(each => {  \n                var precipitation=parseFloat(each.avg_total_precipitation_mm)\n                y.push(precipitation)   \n            \n            }\n            )      \n            plot_data['y']=y\n            console.log(y)\n            return plot_data\n        }\n\nrender() {\n    return (\n        \n        <div>\n            <center>\n           <Plot\n                data = {[\n                        {type: 'bar',\n                         mode: 'lines',\n                         x: [\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\"],\n                         y: this.transformData(this.state.data)['y'],\n                         marker: { color:'gold'}\n                        }\n                    ]}\n           \n                    layout={{width:1000,height:800,title:\"Average Yearly Precipitation in Edmonton from 2000-2022\"}}\n             />\n        </center>     \n        </div>\n    )\n}\n}\n\nexport default Avg_Precipitation_Month_Year_Wise\n",["96","97"],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Snow_Monthly_Year_Wise.js",["98"],"\nimport React, {Component} from 'react';\nimport Plot from 'react-plotly.js';\nimport './App.css';\nclass Avg_Snow_Monthly_Year_Wise extends Component{\n    constructor(props){\n        super(props);\n        this.state={data:[]}\n    }\n    componentDidMount(){\n        const endpoint=\"https://data.edmonton.ca/resource/s4ws-tdws.json?$query=SELECT%20year,%20avg(total_snow_cm)%20group%20by%20year%20order%20by%20year\"\n        fetch(endpoint)\n        .then(response =>response.json())\n        .then(data=>{\n            this.setState({data:data})\n        })\n\n    }\n        \n    transformData (data) {\n            let plot_data = [];\n            let y=[];\n            \n            data.map(each => {  \n                var snow_monthly=parseFloat(each.avg_total_snow_cm)\n                y.push(snow_monthly)   \n            \n            }\n            )  \n     \n            plot_data['y']=y\n            console.log(y)\n            return plot_data\n        }\n\n\t\n        render() {\n            return (\n      \n                <div>\n                    <center>\n                   <Plot\n                        data = {[\n                                {type: 'spline',\n                                 mode: 'lines',\n                                 x: [\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\"],\n                                 y: this.transformData(this.state.data)['y'],\n                                 marker: { color:'violet'}\n                                }\n                            ]}\n                   \n                            layout={{width:1000,height:800,title:\"Average Yearly Snowfall in Edmonton form 2000-2022\"}}\n                     />\n                </center>     \n                </div>\n            )\n        }\n        }\n        \n        export default Avg_Snow_Monthly_Year_Wise","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Max_Temp_Year_Wise.js",["99"],"import React, {Component} from 'react';\nimport Plot from 'react-plotly.js';\nimport './App.css';\nclass Avg_Max_Temp_Year_Wise extends Component{\n    constructor(props){\n        super(props);\n        this.state={data:[]}\n    }\n    componentDidMount(){\n        const endpoint=\"https://data.edmonton.ca/resource/s4ws-tdws.json?$query=SELECT%20year,%20avg(maximum_temperature_c)%20group%20by%20year%20order%20by%20year\";\n        fetch(endpoint)\n        .then(response =>response.json())\n        .then(data=>{\n            this.setState({data:data})\n        })\n\n    }\n     \n    transformData (data) {\n            let plot_data = [];\n            let y=[];\n            \n            data.map(each => {  \n                var max=parseFloat(each.avg_maximum_temperature_c)\n                y.push(max)   \n            \n            }\n            )  \n     \n            plot_data['y']=y\n            console.log(y)\n            return plot_data\n        }\n\n    \n\nrender() {\n    return (\n        <div>\n            <center>\n           <Plot\n                data = {[\n                        {type: 'scatter',\n                         mode: 'lines',\n                         x: [\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\"],\n                         y: this.transformData(this.state.data)['y'],\n                         marker: { color: '#ed022d'}}\n                    ]}\n                \n                    layout={{width:1000,height:800,title:\"Maximum Temperatures of each year\"}}\n             />\n         </center>    \n        </div>\n    )\n}\n}\n\nexport default Avg_Max_Temp_Year_Wise\n","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/HeroSection.js",["100"],"import React from \"react\";\nimport './App.css';\nimport about1 from \"./about.jpeg\";\nconst HeroSection = () => {\n  return (\n    <div className=\"jumbotron \">\n      <h1 className=\"tag1\">MM802 Data Visualization </h1>\n      <img src={about1} style={{\"width\":\"70%\",\"height\":\"65%\"}}/>\n      <p className=\"tag2\">\n        <br/>\n        This project aims at using frameworks such as Reactjs, JavaScript, HTML, CSS to visualize the data collected from City of Edmonton's Open Data. The data visualization has been done average monthly minimum temperature, average monthly maximum temperature, average monthly precipitation for a particular year and average monthly snowfall for a particular year. These parameters play a very important role in determining the climate of an area and will help to analyze and prevent situations such as heat waves, draught , floods etc.\n      </p>\n      <hr className=\"my-4\" />\n      <p>  \n        This Mini Project has been developed by Team Sravanti and Rajat for MM802 Mini Project\n      </p>\n      <a className=\"btn btn-success btn-lg\" href=\"https://data.edmonton.ca/Environmental-Services/Weather-Data-Daily-Environment-Canada/s4ws-tdws\" role=\"button\">\n        Dataset Page\n      </a>\n    </div>\n  );\n};\n\nexport default HeroSection;\n\n","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/CardSection.js",[],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Footer.js",["101","102"],"import React from \"react\";\n\nconst Footer = () => (\n  \n  <section class=\"footor bg-dark text-white\">\n    <br/>\n    <div class='gpt3__cta'>\n       <div class='gpt3__cta-content'> \n         <p>Request to give life to your NFT</p>\n         <h3>Start exploring the endless possibilities in the world of BlockChain.</h3>\n       </div>\n    </div>\n    <p class=\"lead container\"><a href=\"https://github.com/ShravesChinta/MM802-BlockChain-NFT-Project\">Github Repo</a></p>\n    <p class=\"lead container\"><a href=\"#\">Survey Link</a></p>\n    <p class=\"lead container\"><a href=\"#\">Report Link</a></p>\n    <br/>\n  </section>\n);\n\nexport default Footer;\n","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Avg_Min_Temp_Year_Wise.js",["103"],"import React, {Component} from 'react';\nimport Plot from 'react-plotly.js';\nimport './App.css';\nclass Avg_Min_Temp_Year_Wise extends Component{\n    constructor(props){\n        super(props);\n        this.state={data:[]}\n    }\n    componentDidMount(){\n        const endpoint=\"https://data.edmonton.ca/resource/s4ws-tdws.json?$query=SELECT%20year,%20avg(minimum_temperature_c)%20group%20by%20year%20order%20by%20year\";\n        fetch(endpoint)\n        .then(response =>response.json())\n        .then(data=>{\n            this.setState({data:data})\n        })\n\n    }\n        \n    transformData (data) {\n            let plot_data = [];\n            let y=[];\n            \n            data.map(each => {  \n                var min=parseFloat(each.avg_minimum_temperature_c)\n                y.push(min)   \n            \n            }\n            )  \n     \n            plot_data['y']=y\n            console.log(y)\n            return plot_data\n        }\n\n    \n\nrender() {\n    return (\n        <div>\n            <div>\n                <h1 style={{color:\"darkcyan\"}}>\n                    <center>\n                        Data Visualization on Average Minimum and Average Maximum Temperatures Year Wise in Edmonton\n                    </center>\n                </h1>\n                <i> \n                    <center>\n                        802 MM Mini Project \n                   </center>\n                </i>\n            </div>\n            <center>\n           <Plot\n                data = {[\n                        {type: 'scatter',\n                         mode: 'lines',\n                         x: [\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\"],\n                         y: this.transformData(this.state.data)['y'],\n                         marker: { color: 'blue'}}\n                    ]}\n                \n                    layout={{width:1000,height:800,title:\"Minimum Temperatures of each year\"}}\n             />\n        </center>     \n        </div>\n    )\n}\n}\n\nexport default Avg_Min_Temp_Year_Wise\n","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Card.js",[],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Main.js",[],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Middle.js",[],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Bottom.js",[],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/Middle1.js",[],"/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/SignMessage.js",["104"],"import {useState, useRef } from \"react\";\nimport {ethers} from \"ethers\";\nimport ErrorMessage from \"./ErrorMessage\";\n\nconst signMessage = async ({ setError, message }) => {\n  try {\n    console.log({ message });\n    if (!window.ethereum)\n      throw new Error(\"No crypto wallet found. Please install it.\");\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const signature = await signer.signMessage(message);\n    const address = await signer.getAddress();\n\n    return {\n      signature,\n      address\n    };\n  } catch (err) {\n    setError(err.message);\n  }\n};\n\nexport default function SignMessage() {\n  const resultBox = useRef();\n  const [signatures, setSignatures] = useState([]);\n  const [error, setError] = useState();\n\n  const handleSign = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    setError();\n    const sig = await signMessage({\n      setError,\n      message: data.get(\"message\")\n    });\n    if (sig) {\n      setSignatures([...signatures, sig]);\n    }\n  };\n\n  return (\n    <form className=\"m-4\" onSubmit={handleSign}>\n      <div className=\"credit-card w-full shadow-lg mx-auto rounded-xl bg-white\">\n        <main className=\"mt-4 p-4\">\n          <h1 className=\"text-xl font-semibold text-gray-700 text-center\">\n          Sign in to your Metamask Account\n          </h1>\n          <div className=\"\">\n            <div className=\"my-3\">\n              <textarea\n                required\n                type=\"text\"\n                name=\"message\"\n                className=\"textarea w-full h-24 textarea-bordered focus:ring focus:outline-none\"\n                placeholder=\"Message\"\n              />\n            </div>\n          </div>\n        </main>\n        <footer className=\"p-4\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary submit-button focus:ring focus:outline-none w-full\"\n          >\n            Sign message\n          </button>\n          <ErrorMessage message={error} />\n        </footer>\n        {signatures.map((sig, idx) => {\n          return (\n            <div className=\"p-2\" key={sig}>\n              <div className=\"my-3\">\n                <p>Your BlockChain Account is : {sig.address}</p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </form>\n  );\n}","/Users/sravantichinta/Desktop/MMBlockChain/BlockChain_Project/src/ErrorMessage.js",[],{"ruleId":"105","severity":1,"message":"106","line":4,"column":9,"nodeType":"107","messageId":"108","endLine":4,"endColumn":19},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"105","severity":1,"message":"113","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":14},{"ruleId":"105","severity":1,"message":"114","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":15},{"ruleId":"105","severity":1,"message":"115","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":19},{"ruleId":"105","severity":1,"message":"116","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":12},{"ruleId":"105","severity":1,"message":"117","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":19},{"ruleId":"105","severity":1,"message":"118","line":7,"column":8,"nodeType":"107","messageId":"108","endLine":7,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":25,"column":27,"nodeType":"121","messageId":"122","endLine":25,"endColumn":29},{"ruleId":"109","replacedBy":"123"},{"ruleId":"111","replacedBy":"124"},{"ruleId":"119","severity":1,"message":"120","line":24,"column":27,"nodeType":"121","messageId":"122","endLine":24,"endColumn":29},{"ruleId":"119","severity":1,"message":"120","line":23,"column":27,"nodeType":"121","messageId":"122","endLine":23,"endColumn":29},{"ruleId":"125","severity":1,"message":"126","line":8,"column":7,"nodeType":"127","endLine":8,"endColumn":65},{"ruleId":"128","severity":1,"message":"129","line":14,"column":31,"nodeType":"127","endLine":14,"endColumn":43},{"ruleId":"128","severity":1,"message":"129","line":15,"column":31,"nodeType":"127","endLine":15,"endColumn":43},{"ruleId":"119","severity":1,"message":"120","line":23,"column":27,"nodeType":"121","messageId":"122","endLine":23,"endColumn":29},{"ruleId":"105","severity":1,"message":"130","line":26,"column":9,"nodeType":"107","messageId":"108","endLine":26,"endColumn":18},"no-unused-vars","'StrictMode' is defined but never used.","Identifier","unusedVar","no-native-reassign",["131"],"no-negated-in-lhs",["132"],"'Middle' is defined but never used.","'Middle1' is defined but never used.","'HeroSection' is defined but never used.","'Card' is defined but never used.","'CardSection' is defined but never used.","'Bottom' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["131"],["132"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'resultBox' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]